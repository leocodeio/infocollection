// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id
  name             String
  email            String
  emailVerified    Boolean   @default(false)
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt
  role             String?
  phone            String?
  phoneVerified    Boolean?
  profileCompleted Boolean?
  subscriptionId   String?
  sessions         Session[]
  accounts         Account[]
  queries          Query[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum Platform {
  YOUTUBE
  INSTAGRAM
  REDDIT
  TWITTER
  TIKTOK
  LINKEDIN
  FACEBOOK
  OTHER
}

enum QueryStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

model Query {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  keywords     String[]
  platforms    Platform[]
  status       QueryStatus   @default(PENDING)
  totalResults Int           @default(0)
  filters      Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  completedAt  DateTime?
  errorMessage String?
  results      QueryResult[]

  @@index([userId, createdAt])
  @@index([status])
  @@map("query")
}

model QueryResult {
  id         String   @id @default(cuid())
  queryId    String
  query      Query    @relation(fields: [queryId], references: [id], onDelete: Cascade)
  platform   Platform
  attributes Json
  data       Json
  createdAt  DateTime @default(now())

  @@index([queryId])
  @@map("query_result")
}
